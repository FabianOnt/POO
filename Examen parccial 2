//--------------------------------------- serVivo.java -------------------------------------------

public abstract class serVivo {
	
	String name;
	
	public void setName(String name) {
		this.name = name;
	}
	
	public String getName() {
		return name;
	}
}

//--------------------------------------- Persona.java -------------------------------------------

public class Persona extends serVivo{

	private boolean isMale, isMexican, hasPets, isStudent;
	
	// ***** Setters for private attributes *****	
	public void setIsMale(boolean isMale) {
		this.isMale = isMale;
	}
	
	public void setIsMexican(boolean isMexican) {
		this.isMexican = isMexican;
	}
	
	public void sethasPets(boolean hasPets) {
		this.hasPets = hasPets;
	}
	
	public void setIsStudent(boolean isStudent) {
		this.isStudent = isStudent;
	}
	
	// ***** Getters for private attributes *****
	public boolean getIsMale() {
		return isMale;
	}
	
	public boolean getIsMexican() {
		return isMexican;
	}
	
	public boolean getHasPets() {
		return hasPets;
	}
	
	public boolean getIsStudent() {
		return isStudent;
	}
}


//--------------------------------------- Examen.java -------------------------------------------

import java.util.Random;
import java.util.Scanner;

public class Examen {

	public static void main(String[] args) {
		
		Scanner scan = new Scanner(System.in);
		String names[] = {"Juan","Pedro","Amanda","Jimena","Fernando","Ana","Antonio","Grecia","María","Homero"};
		Persona people[] = new Persona[10];
		boolean combinations[][] = new boolean[16][4]; // number of combinations
		fillCombinations(combinations);
		fillData(people, names, combinations);
		
		// Test for unique and randomized values
		test(people);
		
		// Selection of one element
		Random random = new Random();
		int selected = random.nextInt(people.length);
		
		// Menu
		int question, iter=0;
		boolean[] possibles = new boolean[people.length];
		fillConstant(possibles);
		
		System.out.println("---------------------------------------------------------------\n"
				+ "Este es un juego de adivina quién con la computadora :)."
				+ "Ingrese el índice de la pregunta que desea hacer.\nLas preguntas posibles son las sigueintes:\n"
				+ "1.¿Es hombre?\n"
				+ "2.¿Tiene mascotas?\n"
				+ "3.¿Es mexicano?\n"
				+ "4.¿Es estudiante?\n\n");
		
		do {
			int i;
			System.out.println("Haga su pregnta "+(iter+1)+":");
			question = scan.nextInt();
			for (i=0; i<people.length; i++) {
				if (possibles[i]) {
					switch (question) {
					case 1:{
						if (people[i].getIsMale() != people[selected].getIsMale()) {
							possibles[i] = false;
						} break;
					}
					case 2:{
						if (people[i].getHasPets() != people[selected].getHasPets()) {
							possibles[i] = false;
						} break;
					}
					case 3:{
						if (people[i].getIsMexican() != people[selected].getIsMexican()) {
							possibles[i] = false;
						} break;
					}
					case 4:{
						if (people[i].getIsStudent() != people[selected].getIsStudent()) {
							possibles[i] = false;
						} break;
					}
					default: {
						iter -= 1;
					}
					
					}
				}
			}
			iter++;
			
			System.out.println("Personajes posibles:");
			for (i=0; i<possibles.length; i++) {
				if (possibles[i]) {
					System.out.println(i+": "+people[i].getName()+"\n");
				}
			}
			
		} while(iter<3);
		
		System.out.println("Ingrese el índice asociado a la persona que usted cree que es la seleccionada: ");
		int ans = scan.nextInt();
		if (ans == selected) {
			System.out.println("¡Felicidades! Has adivinado el personaje.");
		} else{
			System.out.println("Mala suerte, el personaje correcto es "+people[selected].getName());
		}

	}
	
	public static void fillData(Persona[] people, String[] names, boolean[][] combinations) {
		int i;
		int[] index1 = new int[people.length];
		int[] index2 = new int[16];
		arange(index1); shuffleArray(index1); // names index
		arange(index2); shuffleArray(index2); // combinations index
		
		for (i=0; i<people.length; i++) {
			people[i] = new Persona();
			people[i].setName(names[index1[i]]);
			people[i].setIsMale(combinations[index2[i]][0]);
			people[i].setIsMexican(combinations[index2[i]][1]);
			people[i].sethasPets(combinations[index2[i]][2]);
			people[i].setIsStudent(combinations[index2[i]][3]);			
		}
	}
	
	public static boolean intToBool(int number) {
		if (number == 0) {
			return false;
		} else {
			return true;		
		}
	}
	
	public static int boolToInt(boolean value) {
		if (value) {
			return 1;
		} else {
			return 0;		
		}
	}
	
	public static void fillCombinations(boolean[][] comb) {
		int i=0,p1,p2,p3,p4;
 		//number of unique combinations
		while (i<comb.length) {
			for (p1=0; p1<=1; p1++) {
				for (p2=0; p2<=1; p2++) {
					for (p3=0; p3<=1; p3++) {
						for (p4=0; p4<=1; p4++) {
							comb[i][0] = intToBool(1-p1);
							comb[i][1] = intToBool(1-p2);
							comb[i][2] = intToBool(1-p3);
							comb[i][3] = intToBool(1-p4);
							i++;
						}
					}
				}
			}
				
		}
	}
	
	public static void shuffleArray(int[] array) {
		int i, idx, value;
		Random random = new Random();
		for (i=0; i<array.length; i++) {
			idx = random.nextInt(array.length);
			value = array[idx];
			array[idx] = array[i];
			array[i] = value;
		}
	}
	
	public static void arange(int[] array) {
		int i;
		for (i=0; i<array.length; i++) {
			array[i] = i;
		}
	}
	
	public static void fillConstant(boolean[] array) {
		int i;
		for (i=0; i<array.length; i++) {
			array[i] = true;
		}
	}
	
	public static void test(Persona[] people) {
		int i, totalMale=0, totalPets=0, totalMexican=0, totalStudent=0;
		System.out.println("Nombre|Es hombre|Tiene mascotas|Es mexicano|Es estudainte\n");
		for (i=0; i<people.length; i++) {
			System.out.println(people[i].getName() + ": " + people[i].getIsMale() +", "+ people[i].getHasPets() +", "+ people[i].getIsMexican() +", "+ people[i].getIsStudent()+"\n");
			totalMale += boolToInt(people[i].getIsMale());
			totalPets += boolToInt(people[i].getHasPets());
			totalMexican += boolToInt(people[i].getIsMexican());
			totalStudent += boolToInt(people[i].getIsStudent());
		}
		System.out.println("Suma de valores de atrubutos: " + totalMale + ", " + totalPets +", "+ totalMexican +", "+totalStudent);
	}
}
